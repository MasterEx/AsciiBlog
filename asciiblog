#!/usr/bin/env bash

# TODO
# ADD the archive word to archive

# Created by Periklis Ntanasis - Master_ex
# https://github.com/MasterEx
function readArguments {
	configFile=$1
	configName=$2
	for line in $(cat $1)
	do
		if [[ $line == $2=* ]]
		then
			echo $line | cut -d = -f 2			
		fi
	done
}

function directory_check {
	directory="/home"
	while [ "$(pwd)" != "/home" ]
	do
		for i in $( ls -a )
		do
			if [ $i = ".asciiblog" ]
			then
				directory="$(pwd)/.asciiblog"
				echo "$directory"
				exit 0
			fi
		done
		cd ..
	done

	if [ $directory = "/home" ]
	then
		echo "This is not an AsciiBlog directory"
		exit 0	
	fi
}

function archive {
	echo "in here"
	archive="$1/archive"

	path='../'
	. "$LAYOUTS/archiveLayout.sh"
	
	mkdir -p "$archive"
	
	echo $head > "$archive/index.html"
	for year in $(ls $archive | grep -v "index.html"); do

		path='../../'
		. "$LAYOUTS/archiveLayout.sh"
		echo $head > "$archive/$year/index.html"
		for month in $(ls $archive/$year | grep -v "index.html"); do
			#echo "year $year month $month"
			
			
			path='../../../'
			. "$LAYOUTS/archiveLayout.sh"
			echo $head > "$archive/$year/$month/index.html"
			for day in $(ls $archive/$year/$month | grep -v "index.html"); do
			
				path='../../../../'
				. "$LAYOUTS/archiveLayout.sh"
				echo $head > "$archive/$year/$month/$day/index.html"
				for article in $(ls $archive/$year/$month/$day/*.html| grep -v "index.html"); do
					echo "------ article: $article"
					#echo "<a href=\""$article"\">"$(cat $1/archive.txt | grep $(echo $article | sed 's~.*archive\(.*\)~\1~') | uniq | sed 's~.*\[\(.*\)\]~\1~')"</a><br/>" >> "$archive/$year/$month/$day/index.html"
					article_path=$(cat $2 | grep $(basename $article .html) | cut -d'^' -f 4)
					article_title=$(head -1 $article_path)
					echo "<a href=\""$article"\">"$article_title"</a><br/>" >> "$archive/$year/$month/$day/index.html"
				done			
				echo $tail >> "$archive/$year/$month/$day/index.html"
				
				echo "<a href=\""$day"\">"$day"</a><br/>" >> "$archive/$year/$month/index.html"				
				
			done
			path='../../../'
			. "$LAYOUTS/archiveLayout.sh"
			echo $tail >> "$archive/$year/$month/index.html"
			
			echo "<a href=\""$month"\">"$month"</a><br/>" >> "$archive/$year/index.html"
		done
		path='../../'
		. "$LAYOUTS/archiveLayout.sh"
		echo $tail >> "$archive/$year/index.html"
		
		echo "<a href=\""$year"\">"$year"</a><br/>" >> "$archive/index.html"
		#ls $archive/$year
	done
	path='../'
	. "$LAYOUTS/archiveLayout.sh"
	echo $tail >> "$archive/index.html"
}

# very likely that it works!
function create_rss {
	echo "create RSS"
	. "$(dirname "$0")/rsswriter.sh"
	pageroot="$1"

	FILE="$pageroot/archive.rss"

	homepage="http://masterex.github.com"

	open "$homepage/archive.rss" "Master's Touch" $homepage "Master_ex's personal blog"
	language "en-us"
	generator "just a shell script"
	echo "THE FILE IS $2"
	# $2 is the archive file
	for entry in $(cat $2)
	do
		year=$(echo $entry | cut -d'^' -f1)
		month=$(echo $entry | cut -d'^' -f2)
		day=$(echo $entry | cut -d'^' -f3)
		date="$year/$month/$day"
		date=$(date -d $date -R)
		basename $(echo $entry | cut -d'^' -f4) .txt
		link="$(basename $(echo $entry | cut -d'^' -f4) .txt).html"
		title="$(head -1 $(echo $entry | cut -d'^' -f4))"
		#description=$(grep -Pzo '(?s)//rss.*//rss' "../"$(echo $link|sed -e "s/.html/.txt/g") | head -n -1  |tail -n +2 | sed -e "s/\\n/PERIKLIS/g")
		echo "DESCRIPTION"
		description=$(cat $pageroot/archive/$year/$month/$day/$link | tr '\n' ' ' | sed -e 's/.*<!-- MAIN_BODY -->//g' | sed -e 's/<!-- MAIN_BODY_END -->.*//g')
		echo "HERE IT IS $description"
		# maybe add meta description in the future - ALSO TAKE DESCRIPTION AS ARGUMENT
		oitem "$title" "$homepage/archive/$year/$month/$day/$link"
		ipubDate "$date"
		guid "$homepage/$link"
		citem
	done
	
	close
}

if [ $1 != "init" ]
then
	# removed the if [ -d ".asciiblog ] , checks if asciiblog dir and sets the globals
	ASCIIBLOG_DIR=$(directory_check)
	# MAY RISE PROBLEMS
	echo $ASCIIBLOG_DIR
	ASCIIBLOG_ROOT="$(cd $ASCIIBLOG_DIR/.. && pwd)"
	echo "here"	
	echo $ASCIIBLOG_ROOT
	IMAGES="$(readArguments $ASCIIBLOG_ROOT/.asciiblog/configuration images-dir)"
	JAVASCRIPTS="$(readArguments $ASCIIBLOG_ROOT/.asciiblog/configuration javascripts-dir)"
	STYLES="$(readArguments $ASCIIBLOG_ROOT/.asciiblog/configuration styles-dir)"
	LAYOUTS="$(readArguments $ASCIIBLOG_ROOT/.asciiblog/configuration layouts-dir)"
fi

function build_website {
	LAYOUT=myBlog
	main="$ASCIIBLOG_ROOT/pages"
	pageroot="$ASCIIBLOG_ROOT/website"

	# Copy the needed files to the destination directory
	cp -r "$IMAGES" "$JAVASCRIPTS" "$STYLES" $pageroot

	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$IMAGES/icons --attribute=badges"

	# get all the files in the pages directory
	for file in $(ls $main)
	do
		name="$(echo $file | cut -d'.' -f 1)"
		$ASCIIDOC_HTML -o"$pageroot/$name.html" "$main/$file"
	done
}

function build_all_posts {
	for file in $(cat $ASCIIBLOG_ROOT/.asciiblog/archive);
	do
		year="$(echo $file | cut -d'^' -f 1 )"
		month="$(echo $file | cut -d'^' -f 2 )"
		day="$(echo $file | cut -d'^' -f 3 )"
		file="$(echo $file | cut -d'^' -f 4 )"
		echo $file
		# TODO: delete files or add new ones
		pageroot="$ASCIIBLOG_ROOT/website/archive/$year/$month/$day"
		mkdir -p $pageroot
		LAYOUT=myBlogPost
		ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date="$DATE""
	
		$ASCIIDOC_HTML -o"$pageroot/$(basename $file .txt).html" "$file"
		
	done
	# archive: have to sort the entries - MERGE WITH THE UPPER FOR
	for line in $(cat $ASCIIBLOG_ROOT/.asciiblog/archive)
	do		
		#echo $line
		year="$(echo $line | cut -d'^' -f 1)"
		month="$(echo $line | cut -d'^' -f 2)"
		day="$(echo $line | cut -d'^' -f 3)"
		article="$(echo $line | cut -d'^' -f 4)"
		postname="$(basename $article .txt)"
		#echo $($LAYOUTS/archiveLine.sh $year $month $day ${postname} "$(head -1 $article)")
		archive_entries="$archive_entries $($LAYOUTS/archiveLine.sh $year $month $day ${postname} "$(head -1 $article)")"
	done
	
	# maybe rename to gen.html or something like that - also may delete it afterwards
	echo $archive_entries > "$LAYOUTS/archive.html"	
	LAYOUT=myBlogArchive
	pageroot="$ASCIIBLOG_ROOT/website"
	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date=$DATE"
	$ASCIIDOC_HTML -o"$pageroot/archive.html" "$LAYOUTS/empty.txt"

	archive $pageroot "$ASCIIBLOG_ROOT/.asciiblog/archive"
	create_rss $pageroot "$ASCIIBLOG_ROOT/.asciiblog/archive"
}

function post {
	YEAR="$(date +%Y)"
	MONTH="$(date +%m)"
	DAY="$(date +%d)"

	# create archive directory
	archdate="$YEAR/$MONTH/$DAY"
	archivedir="$ASCIIBLOG_ROOT/archive/$archdate"
	echo $archivedir
	mkdir -p "$archivedir"
	mkdir -p "$ASCIIBLOG_ROOT/website/archive/$archdate"

	if [ -d $1 ]
	then
		postdirectory="$(realpath $1)"
	else
		postdirectory="$(realpath $(dirname $1))"
	fi
	
	if [ "$(dirname $postdirectory)" != "$ASCIIBLOG_ROOT/tmp" ]
	then
		echo "Not a valid post directory: $postdirectory"
		exit 0;
	fi
	
	cp -R "$postdirectory/"* "$archivedir"

	# update the archive file
	postname="$(echo $postdirectory | tr // '\n' | tail -1)"
	echo "$YEAR^$MONTH^$DAY^$archivedir/$postname.txt" >> "$ASCIIBLOG_ROOT/.asciiblog/archive"

	main="$ASCIIBLOG_ROOT/archive"
	pageroot="$ASCIIBLOG_ROOT/website/archive/$archdate"

	mkdir -p $pageroot

	LAYOUT=myBlogPost        # customized layout based to layout2.

	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date="$DATE""

	$ASCIIDOC_HTML -o"$ASCIIBLOG_ROOT/website/archive/$YEAR/$MONTH/$DAY/$postname.html" "$archivedir/$postname.txt"

	# update archive

	LAYOUT=myBlog        # customized layout based to layout2.
	main="$ASCIIBLOG_ROOT/pages"
	pageroot="$ASCIIBLOG_ROOT/website"
	echo "POSTENTRY"
	
	archive_entries=""
	
	# archive: have to sort the entries
	for line in $(cat $ASCIIBLOG_ROOT/.asciiblog/archive)
	do		
		#echo $line
		year="$(echo $line | cut -d'^' -f 1)"
		month="$(echo $line | cut -d'^' -f 2)"
		day="$(echo $line | cut -d'^' -f 3)"
		article="$(echo $line | cut -d'^' -f 4)"
		postname="$(basename $article .txt)"
		#echo $($LAYOUTS/archiveLine.sh $year $month $day ${postname} "$(head -1 $article)")
		archive_entries="$archive_entries $($LAYOUTS/archiveLine.sh $year $month $day ${postname} "$(head -1 $article)")"
	done
	
	# maybe rename to gen.html or something like that - also may delete it afterwards
	echo $archive_entries > "$LAYOUTS/archive.html"
	
	LAYOUT=myBlogArchive
	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date=$DATE"
	$ASCIIDOC_HTML -o"$pageroot/archive.html" "$LAYOUTS/empty.txt"

	# track the files that belong to the article
	for files in $(ls $postdirectory);
	do
		echo "$files" >> "$ASCIIBLOG_ROOT/.asciiblog/post_files/$postname"
	done
	# I just deleted my whole blog with that !!! DANGEROUS
	rm -rf "$postdirectory"

	# create the achiving directories
	archive $pageroot "$ASCIIBLOG_ROOT/.asciiblog/archive"

	# create rss
	#create_rss "$ASCIIBLOG_ROOT/archive"
	create_rss $pageroot "$ASCIIBLOG_ROOT/.asciiblog/archive"
}

function new_post {
	YEAR="$(date +%Y)"
	MONTH="$(date +%m)"
	DAY="$(date +%d)"
	id="${1:-$(date +%s)}"

	# create empty file
	archive="$ASCIIBLOG_ROOT/archive"
	tmp="$ASCIIBLOG_ROOT/tmp"
	destdir="$tmp"
	mkdir -p "$destdir/$id"
	touch "$destdir/$id/$id.txt"

	# add entry in temp archive
	#echo "$YEAR^$MONTH^$DAY^$id" >> "$ASCIIBLOG_ROOT/.asciiblog/tmp_archive"

	# ask user to edit the file
	echo "$destdir/$id.txt was created"
	echo -n "Do you want to edit this file now? (Y/N)"
	read char
	if [ $char = "Y" ]
	then
		$EDITOR "$destdir/$id/$id.txt"
	fi
}

function tmp_build {
	tempdir=$(mktemp -d)
	VERS="8.1.0"
	DATE="2006-10-22"
	LAYOUT=myBlog        # customized layout based to layout2 of asciidoc.

	main="$ASCIIBLOG_ROOT/pages"
	pageroot="$tempdir"

	# Copy the needed files to the destination directory
	cp -r "$IMAGES" "$JAVASCRIPTS" "$STYLES" $pageroot

	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$IMAGES/icons --attribute=badges --attribute=revision=$VERS  --attribute=date=$DATE"

	# get all the files in the pages directory
	for file in $(ls $main)
	do
		name="$(echo $file | cut -d'.' -f 1)"
		$ASCIIDOC_HTML -o"$pageroot/$name.html" "$main/$file"
	done

	# posts
	#cp "$ASCIIBLOG_ROOT/pages/archive.txt" "$tempdir/archive.txt"
	LAYOUT=myBlogPost
	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date=$DATE"

	cp "$ASCIIBLOG_ROOT/.asciiblog/archive" "$tempdir/archive_list"
	# update the archive file
	#postname="$(echo $postdirectory | tr // '\n' | tail -1)"

	for files in $(cat $ASCIIBLOG_ROOT/.asciiblog/archive)
	do
		YEAR="$(echo $files | cut -d'^' -f 1)"
		MONTH="$(echo $files | cut -d'^' -f 2)"
		DAY="$(echo $files | cut -d'^' -f 3)"
		post="$(echo $files | cut -d'^' -f 4)"
		postname="$(echo $post | tr // '\n' | tail -1)"
		mkdir -p "$tempdir/archive/$YEAR/$MONTH/$DAY"
		$ASCIIDOC_HTML -o"$tempdir/archive/$YEAR/$MONTH/$DAY/$(basename $postname .txt).html" "$post"
		cp -r "$(dirname $post)/"*[!"$postname"] "$tempdir/archive/$YEAR/$MONTH/$DAY" &> /dev/null
	done
	YEAR="$(date +%Y)"
	MONTH="$(date +%m)"
	DAY="$(date +%d)"
	for files in $(ls $ASCIIBLOG_ROOT/tmp)
	do
		mkdir -p "$tempdir/archive/$YEAR/$MONTH/$DAY"
		$ASCIIDOC_HTML -o"$tempdir/archive/$YEAR/$MONTH/$DAY/$files.html" "$ASCIIBLOG_ROOT/tmp/$files/$files.txt"
		cp -r "$ASCIIBLOG_ROOT/tmp/$files/"*[!"$files.txt"] "$tempdir/archive/$YEAR/$MONTH/$DAY" &> /dev/null
		#postentry="\* $YEAR-$MONTH-$DAY: link:archive/$YEAR/$MONTH/$DAY/${files}.html[$(head -1 $ASCIIBLOG_ROOT/tmp/$files/$files.txt)]"
		#cat "$tempdir/archive.txt" | sed "4i $postentry" > "$tempdir/archivetmp.txt"
		#mv "$tempdir/archivetmp.txt" "$tempdir/archive.txt"
		echo "$YEAR^$MONTH^$DAY^$ASCIIBLOG_ROOT/tmp/$files/${files}.txt" >> "$tempdir/archive_list"
	done

	#LAYOUT=myBlog 
	#ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date=$DATE"
	#$ASCIIDOC_HTML -o"$tempdir/archive.html" "$tempdir/archive.txt"

	# archive: have to sort the entries
	for line in $(cat $tempdir/archive_list)
	do		
		#echo $line
		year="$(echo $line | cut -d'^' -f 1)"
		month="$(echo $line | cut -d'^' -f 2)"
		day="$(echo $line | cut -d'^' -f 3)"
		article="$(echo $line | cut -d'^' -f 4)"
		postname="$(basename $article .txt)"
		#echo $($LAYOUTS/archiveLine.sh $year $month $day ${postname} "$(head -1 $article)")
		archive_entries="$archive_entries $($LAYOUTS/archiveLine.sh $year $month $day ${postname} "$(head -1 $article)")"
	done
	
	# maybe rename to gen.html or something like that - also may delete it afterwards
	echo $archive_entries > "$LAYOUTS/archive.html"
	
	LAYOUT=myBlogArchive
	ASCIIDOC_HTML="asciidoc --backend=xhtml11 --conf-file=$LAYOUTS/${LAYOUT}.conf --attribute icons --attribute iconsdir=$ASCIIBLOG_ROOT/website/images/icons --attribute=badges --attribute=revision=$VERS  --attribute=date=$DATE"
	$ASCIIDOC_HTML -o"$pageroot/archive.html" "$LAYOUTS/empty.txt"

	# create the achiving directories
	archive $tempdir "$tempdir/archive_list"

	# create rss
	create_rss $tempdir "$tempdir/archive_list"

	$BROWSER "$tempdir/index.html"
	read -p "HIT ENTER TO TERMINATE THE TEMPORARY VIEW"
	rm -rf $tempdir

}

function delete {
	postname=$(basename $1 .txt)
	path="$(realpath $(dirname $1))"

	mkdir -p "$ASCIIBLOG_ROOT/.asciiblog/deleted/$postname"

	for file in $(cat "$ASCIIBLOG_ROOT/.asciiblog/post_files/$postname");
	do
		mv "$path/$file" "$ASCIIBLOG_ROOT/.asciiblog/deleted/$postname/$file"
	done

	rm "$ASCIIBLOG_ROOT/.asciiblog/post_files/$postname"
	echo $1
	# change this literal in sed
	new_archive=$(sed "\:$1:d" "$ASCIIBLOG_ROOT/.asciiblog/archive")
	echo $new_archive
	echo $new_archive > "$ASCIIBLOG_ROOT/.asciiblog/archive"
}

function init {
	# TODO: check if dirs already exist and if are created successfully

	# We need to create the files and directories needed for the AsciiBLog to work

	# Hidden directory with settings and other stuff that aren't regularly needed
	mkdir .asciiblog
	echo "Initialized empty AsciiBlog repository in $(pwd)/.asciiblog"	
	
	echo "images-dir=/etc/asciidoc/images" > .asciiblog/configuration
	echo "javascripts-dir=/etc/asciidoc/javascripts" >> .asciiblog/configuration

	if [ -d "/etc/asciiblog" ]
	then
		echo "layouts-dir=/etc/asciiblog/layouts" >> .asciiblog/configuration
		echo "styles-dir=/etc/asciiblog/styles" >> .asciiblog/configuration
		cp -r /etc/asciiblog/pages .
	else
		echo "layouts-dir=$(pwd)/.asciiblog/layouts" >> .asciiblog/configuration
		echo "styles-dir=$(pwd)/.asciiblog/styles" >> .asciiblog/configuration
		cp -r $(dirname "$0")/layouts .asciiblog
		cp -r $(dirname "$0")/styles .asciiblog
		cp -r $(dirname "$0")/pages .
	fi

	# Optional directories in .asciiblog
	# images
	# javascripts
	# layouts
	# styles

	mkdir .asciiblog/post_files
	mkdir archive
	mkdir website
	mkdir tmp
}

while :
do
	case $1 in
		help)
			echo "This is help"
			exit 0
			;;
		build-pages)
			build_website
			exit 0
			;;
		build-all)
			rm -rf "$ASCIIBLOG_ROOT/website/"*
			build_website
			#mv "/etc/asciiblog/pages/archive.txt" "$ASCIIBLOG_ROOT/pages/archive.txt"
			build_all_posts
			exit 0
			;;
		post)
			echo "Post article"
			post $2
			exit 0
			;;
		new-post)
			new_post $2
			exit 0
			;;
		tmp-build)
			tmp_build
			exit 0
			;;
		delete)
			delete $2
			exit 0
			;;
		init)
			init
			exit 0
			;;
		*)
			echo "unknown option: $1" >&2
			exit 1
			;;
	esac
done
